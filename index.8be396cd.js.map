{"mappings":"AAAO,SAASA,IAOd,MAFc,OAJFC,KAAKC,MAAsB,IAAhBD,KAAKE,cACdF,KAAKC,MAAsB,IAAhBD,KAAKE,cACjBF,KAAKC,MAAsB,IAAhBD,KAAKE,Y,CAO/B,MAAMC,EAAcJ,IACpBK,QAAQC,IAAIF,GCTLG,eAAeC,IACpB,IACE,MAAMC,QAAiBC,MAJJ,yBAKnB,IAAKD,EAASE,GACZ,MAAM,IAAIC,MAAM,oBAAoBH,EAASI,cAE/C,MAAMC,QAAeL,EAASM,OAE9B,OADAV,QAAQC,IAAIQ,GACLA,C,CACP,MAAOE,GACPX,QAAQW,MAAM,UAAUA,I,ECT5B,MAAMC,EAAaC,SAASC,cAAc,iBAEnCZ,iBACL,IACE,MAAMa,QAAmBZ,IAEnBa,EAAW,GAEXC,EAASF,EACZG,KAAI,CAACC,EAAMC,KACV,MAAMC,EAAM,GAAGF,EAAKG,SAASH,EAAKI,SAClC,IAAIC,EAEAR,EAASK,GACXG,EAAQR,EAASK,IAEjBG,EAAQ7B,IACRqB,EAASK,GAAOG,GAKlB,MAFkB,wCAAwCL,EAAKG,oBAAoBH,EAAKI,+BAA+BC,+BAAmCJ,cAE1I,IAEjBK,KAAK,IACRb,EAAWc,mBAAmB,YAAaT,GAC3CjB,QAAQC,IAAIW,E,CACZ,MAAOD,GACPX,QAAQW,MAAM,UAAUA,I,EAI5BgB","sources":["src/js/getRandomColor.js","src/js/getBlocks.js","src/js/createBlocksMarkup.js"],"sourcesContent":["export function getRandomColor() {\n  const red = Math.floor(Math.random() * 256);\n  const green = Math.floor(Math.random() * 256);\n  const blue = Math.floor(Math.random() * 256);\n\n  const color = `rgb(${red}, ${green}, ${blue})`;\n\n  return color;\n}\n\nconst randomColor = getRandomColor();\nconsole.log(randomColor);\n","const jsonBlocksPath = '/src/data/blocks.json';\n\nexport async function getBlocks() {\n  try {\n    const response = await fetch(jsonBlocksPath);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch: ${response.statusText}`);\n    }\n    const blocks = await response.json();\n    console.log(blocks);\n    return blocks;\n  } catch (error) {\n    console.error(`Error: ${error}`);\n  }\n}\n","import { getBlocks } from './getBlocks.js';\nimport { getRandomColor } from './getRandomColor.js';\n\nconst blocksList = document.querySelector('.blocks-list');\n\nexport async function createBlocksMarkup() {\n  try {\n    const rectangles = await getBlocks();\n\n    const colorMap = {};\n\n    const markup = rectangles\n      .map((rect, index) => {\n        const key = `${rect.width}-${rect.height}`;\n        let color;\n\n        if (colorMap[key]) {\n          color = colorMap[key];\n        } else {\n          color = getRandomColor();\n          colorMap[key] = color;\n        }\n\n        const blockHTML = `<li class=\"block-item\" style=\"width: ${rect.width}px; height: ${rect.height}px; background-color: ${color}\"><div class=\"block-index\">${index}</div></li>`;\n\n        return blockHTML;\n      })\n      .join('');\n    blocksList.insertAdjacentHTML('beforeend', markup);\n    console.log(blocksList);\n  } catch (error) {\n    console.error(`Error: ${error}`);\n  }\n}\n\ncreateBlocksMarkup();\n"],"names":["$d788a1a0aa6864cf$export$e4369cabd7e84cd9","Math","floor","random","$d788a1a0aa6864cf$var$randomColor","console","log","async","$6da657675c0fd2d2$export$7b3fec4f41bd29a3","response","fetch","ok","Error","statusText","blocks","json","error","$b011a5d62c104f0b$var$blocksList","document","querySelector","rectangles","colorMap","markup","map","rect","index","key","width","height","color","join","insertAdjacentHTML","$b011a5d62c104f0b$export$32042fdf1ed9d584"],"version":3,"file":"index.8be396cd.js.map"}